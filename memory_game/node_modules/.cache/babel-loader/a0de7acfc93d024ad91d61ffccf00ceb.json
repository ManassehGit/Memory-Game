{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { GAME_GRID_SIZES, GAME_THEMES } from '../constants';\nconst initialState = {\n  gameElements: [],\n  minutesElapsed: 0,\n  secondsElapsed: 0,\n  moves: [],\n  pairs: [],\n  lastTwoMoves: [],\n  gameStarted: 0,\n  gridTheme: GAME_THEMES.NUMBERS,\n  numOfPlayers: 1,\n  activePlayerIndex: 0,\n  gridSize: GAME_GRID_SIZES['4x4'],\n  isGameFinished: false\n};\nconst gameSlice = createSlice({\n  name: 'gameSlice',\n  initialState,\n  reducers: {\n    setGameSettings: (state, action) => {\n      state.gridSize = action.payload.gridSize;\n      state.gridTheme = action.payload.gridTheme;\n      state.numOfPlayers = action.payload.numOfPlayers;\n    },\n    generateGameElements: state => {\n      const gridDifferentElements = state.gridSize / 2;\n      const newGameElements = [];\n\n      for (let i = 0; i < gridDifferentElements; i++) {\n        let randomPosition = 0;\n        let countInserted = 0;\n\n        do {\n          randomPosition = Math.floor(Math.random() * state.gridSize);\n\n          if (newGameElements[randomPosition] === undefined) {\n            newGameElements[randomPosition] = {\n              value: i + 1,\n              isVisible: false,\n              isActive: false\n            };\n            countInserted++;\n          }\n        } while (countInserted < 2);\n\n        countInserted = 0;\n      }\n\n      state.gameElements = newGameElements;\n    },\n    updateTimer: state => {\n      if (state.secondsElapsed + 1 === 60) {\n        state.minutesElapsed += 1;\n        state.secondsElapsed = 0;\n      } else {\n        state.secondsElapsed += 1;\n      }\n    },\n    handleClickGameElement: (state, action) => {\n      const {\n        payload: gameElement\n      } = action;\n      state.gameElements[gameElement.index].isVisible = true;\n      state.gameElements[gameElement.index].isActive = true;\n      state.lastTwoMoves.push(gameElement);\n    },\n    hideGameElementsVisibility: (state, action) => {\n      const {\n        payload: gameElementsToHide\n      } = action;\n      gameElementsToHide.forEach(gameElementToHide => {\n        state.gameElements[gameElementToHide.index].isVisible = false;\n      });\n    },\n    disableElementsActiveState: (state, action) => {\n      const {\n        payload: gameElementsToChangeActiveState\n      } = action;\n      gameElementsToChangeActiveState.forEach(gameElementToChangeActive => {\n        state.gameElements[gameElementToChangeActive.index].isActive = false;\n      });\n    },\n    startNewGame: state => {\n      state.isGameFinished = false;\n      state.minutesElapsed = 0;\n      state.secondsElapsed = 0;\n      state.gameElements = [];\n      state.lastTwoMoves = [];\n      state.moves = [];\n      state.pairs = [];\n      state.activePlayerIndex = 0;\n      state.gameStarted += 1;\n\n      for (let i = 0; i < state.numOfPlayers; i++) {\n        state.moves[i] = state.pairs[i] = 0;\n      }\n    },\n    changePlayerTurn: state => {\n      if (state.activePlayerIndex + 1 === state.numOfPlayers) state.activePlayerIndex = 0;else state.activePlayerIndex += 1;\n    },\n    setGameFinished: state => {\n      state.isGameFinished = true;\n    },\n    resetLastTwoMoves: state => {\n      state.moves[state.activePlayerIndex] += 1;\n      state.lastTwoMoves = [];\n    },\n    updatePairs: state => {\n      state.pairs[state.activePlayerIndex] += 1;\n    }\n  }\n});\nexport const {\n  setGameSettings,\n  generateGameElements,\n  restartGame,\n  updateTimer,\n  handleClickGameElement,\n  hideGameElementsVisibility,\n  disableElementsActiveState,\n  startNewGame,\n  changePlayerTurn,\n  setGameFinished,\n  resetLastTwoMoves,\n  updatePairs\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"sources":["C:/Users/eshun/OneDrive/Documents/Amalitech/Project/Memory-Game/memory_game/src/store/gameSlice.js"],"names":["createSlice","GAME_GRID_SIZES","GAME_THEMES","initialState","gameElements","minutesElapsed","secondsElapsed","moves","pairs","lastTwoMoves","gameStarted","gridTheme","NUMBERS","numOfPlayers","activePlayerIndex","gridSize","isGameFinished","gameSlice","name","reducers","setGameSettings","state","action","payload","generateGameElements","gridDifferentElements","newGameElements","i","randomPosition","countInserted","Math","floor","random","undefined","value","isVisible","isActive","updateTimer","handleClickGameElement","gameElement","index","push","hideGameElementsVisibility","gameElementsToHide","forEach","gameElementToHide","disableElementsActiveState","gameElementsToChangeActiveState","gameElementToChangeActive","startNewGame","changePlayerTurn","setGameFinished","resetLastTwoMoves","updatePairs","restartGame","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { GAME_GRID_SIZES, GAME_THEMES } from '../constants';\r\n\r\nconst initialState = {\r\n  gameElements: [],\r\n  minutesElapsed: 0,\r\n  secondsElapsed: 0,\r\n  moves: [],\r\n  pairs: [],\r\n  lastTwoMoves: [],\r\n  gameStarted: 0,\r\n  gridTheme: GAME_THEMES.NUMBERS,\r\n  numOfPlayers: 1,\r\n  activePlayerIndex: 0,\r\n  gridSize: GAME_GRID_SIZES['4x4'],\r\n  isGameFinished: false,\r\n};\r\n\r\nconst gameSlice = createSlice({\r\n  name: 'gameSlice',\r\n  initialState,\r\n  reducers: {\r\n    setGameSettings: (state, action) => {\r\n      state.gridSize = action.payload.gridSize;\r\n      state.gridTheme = action.payload.gridTheme;\r\n      state.numOfPlayers = action.payload.numOfPlayers;\r\n    },\r\n    generateGameElements: (state) => {\r\n      const gridDifferentElements = state.gridSize / 2;\r\n      const newGameElements = [];\r\n\r\n      for (let i = 0; i < gridDifferentElements; i++) {\r\n        let randomPosition = 0;\r\n        let countInserted = 0;\r\n\r\n        do {\r\n          randomPosition = Math.floor(Math.random() * state.gridSize);\r\n          if (newGameElements[randomPosition] === undefined) {\r\n            newGameElements[randomPosition] = {\r\n              value: i + 1,\r\n              isVisible: false,\r\n              isActive: false,\r\n            };\r\n\r\n            countInserted++;\r\n          }\r\n        } while (countInserted < 2);\r\n\r\n        countInserted = 0;\r\n      }\r\n\r\n      state.gameElements = newGameElements;\r\n    },\r\n    updateTimer: (state) => {\r\n      if (state.secondsElapsed + 1 === 60) {\r\n        state.minutesElapsed += 1;\r\n        state.secondsElapsed = 0;\r\n      } else {\r\n        state.secondsElapsed += 1;\r\n      }\r\n    },\r\n    handleClickGameElement: (state, action) => {\r\n      const { payload: gameElement } = action;\r\n      state.gameElements[gameElement.index].isVisible = true;\r\n      state.gameElements[gameElement.index].isActive = true;\r\n\r\n      state.lastTwoMoves.push(gameElement);\r\n    },\r\n    hideGameElementsVisibility: (state, action) => {\r\n      const { payload: gameElementsToHide } = action;\r\n      gameElementsToHide.forEach((gameElementToHide) => {\r\n        state.gameElements[gameElementToHide.index].isVisible = false;\r\n      });\r\n    },\r\n    disableElementsActiveState: (state, action) => {\r\n      const { payload: gameElementsToChangeActiveState } = action;\r\n      gameElementsToChangeActiveState.forEach((gameElementToChangeActive) => {\r\n        state.gameElements[gameElementToChangeActive.index].isActive = false;\r\n      });\r\n    },\r\n    startNewGame: (state) => {\r\n      state.isGameFinished = false;\r\n      state.minutesElapsed = 0;\r\n      state.secondsElapsed = 0;\r\n      state.gameElements = [];\r\n      state.lastTwoMoves = [];\r\n      state.moves = [];\r\n      state.pairs = [];\r\n      state.activePlayerIndex = 0;\r\n\r\n      state.gameStarted += 1;\r\n      for (let i = 0; i < state.numOfPlayers; i++) {\r\n        state.moves[i] = state.pairs[i] = 0;\r\n      }\r\n    },\r\n    changePlayerTurn: (state) => {\r\n      if (state.activePlayerIndex + 1 === state.numOfPlayers)\r\n        state.activePlayerIndex = 0;\r\n      else state.activePlayerIndex += 1;\r\n    },\r\n    setGameFinished: (state) => {\r\n      state.isGameFinished = true;\r\n    },\r\n    resetLastTwoMoves: (state) => {\r\n      state.moves[state.activePlayerIndex] += 1;\r\n      state.lastTwoMoves = [];\r\n    },\r\n    updatePairs: (state) => {\r\n      state.pairs[state.activePlayerIndex] += 1;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setGameSettings,\r\n  generateGameElements,\r\n  restartGame,\r\n  updateTimer,\r\n  handleClickGameElement,\r\n  hideGameElementsVisibility,\r\n  disableElementsActiveState,\r\n  startNewGame,\r\n  changePlayerTurn,\r\n  setGameFinished,\r\n  resetLastTwoMoves,\r\n  updatePairs,\r\n} = gameSlice.actions;\r\nexport default gameSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}