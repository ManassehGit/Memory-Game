{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eshun\\\\OneDrive\\\\Documents\\\\Amalitech\\\\Project\\\\Memory-Game\\\\memory_game\\\\src\\\\components\\\\GameGrid.js\",\n    _s = $RefreshSig$();\n\nimport styles from '../styles/GameGrid.module.css';\nimport GameButton from './GameButton';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { handleClickGameElement, hideGameElementsVisibility, changePlayerTurn, setGameFinished, resetLastTwoMoves, disableElementsActiveState, updatePairs } from '../store/gameSlice';\nimport { toggleModalGameEndVisibility } from '../store/modalsSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { GAME_GRID_SIZES, GAME_THEMES, ICONS_ARR } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameGrid = () => {\n  _s();\n\n  const gridSize = useSelector(state => state.game.gridSize);\n  const gridTheme = useSelector(state => state.game.gridTheme);\n  const gameElements = useSelector(state => state.game.gameElements);\n  const lastTwoMoves = useSelector(state => state.game.lastTwoMoves);\n  const numOfPlayers = useSelector(state => state.game.numOfPlayers);\n  const dispatch = useDispatch();\n  const canPlay = lastTwoMoves.length !== 2;\n  useEffect(() => {\n    let timeout;\n\n    if (!canPlay) {\n      timeout = setTimeout(() => {\n        if (lastTwoMoves[0].value !== lastTwoMoves[1].value) {\n          dispatch(hideGameElementsVisibility([lastTwoMoves[0], lastTwoMoves[1]]));\n          dispatch(disableElementsActiveState([lastTwoMoves[0], lastTwoMoves[1]]));\n          dispatch(resetLastTwoMoves());\n          if (numOfPlayers > 1) dispatch(changePlayerTurn());\n        } else {\n          dispatch(disableElementsActiveState([lastTwoMoves[0], lastTwoMoves[1]]));\n          dispatch(resetLastTwoMoves());\n          dispatch(updatePairs());\n        }\n\n        if (gameElements.length > 0 && gameElements.every(gameElement => gameElement.isVisible)) {\n          dispatch(setGameFinished());\n          dispatch(toggleModalGameEndVisibility());\n        }\n      }, 1000);\n    }\n\n    return () => {\n      if (!canPlay && timeout) {\n        clearTimeout(timeout);\n      }\n    };\n  }, [gameElements, lastTwoMoves, numOfPlayers, canPlay, dispatch]);\n  const onMoveMadeHandler = useCallback(gameElement => {\n    if (!canPlay) return;\n    dispatch(handleClickGameElement(gameElement));\n  }, [dispatch, canPlay]);\n  const generateGridElements = useMemo(() => {\n    const gridElements = [];\n    gameElements.forEach((gameElement, index) => {\n      gridElements.push( /*#__PURE__*/_jsxDEV(GameButton, {\n        canPlay: canPlay,\n        isVisible: gameElement.isVisible,\n        isActive: gameElement.isActive,\n        onMoveMade: onMoveMadeHandler.bind(null, {\n          value: gameElement.value,\n          index\n        }),\n        children: gridTheme === GAME_THEMES.NUMBERS ? gameElement.value : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: ICONS_ARR[gameElement.value - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this));\n    });\n    return gridElements;\n  }, [gameElements, gridTheme, onMoveMadeHandler, canPlay]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles['game-grid']} ${styles[`game-grid--${gridSize === GAME_GRID_SIZES['4x4'] ? '4x4' : '6x6'}`]}`,\n    children: generateGridElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameGrid, \"C1of/q/XGZtTHPiWmv10OV0DvjQ=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = GameGrid;\nexport default GameGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameGrid\");","map":{"version":3,"sources":["C:/Users/eshun/OneDrive/Documents/Amalitech/Project/Memory-Game/memory_game/src/components/GameGrid.js"],"names":["styles","GameButton","useCallback","useEffect","useMemo","useDispatch","useSelector","handleClickGameElement","hideGameElementsVisibility","changePlayerTurn","setGameFinished","resetLastTwoMoves","disableElementsActiveState","updatePairs","toggleModalGameEndVisibility","FontAwesomeIcon","GAME_GRID_SIZES","GAME_THEMES","ICONS_ARR","GameGrid","gridSize","state","game","gridTheme","gameElements","lastTwoMoves","numOfPlayers","dispatch","canPlay","length","timeout","setTimeout","value","every","gameElement","isVisible","clearTimeout","onMoveMadeHandler","generateGridElements","gridElements","forEach","index","push","isActive","bind","NUMBERS"],"mappings":"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","sourcesContent":["import styles from '../styles/GameGrid.module.css';\r\nimport GameButton from './GameButton';\r\nimport { useCallback, useEffect, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  handleClickGameElement,\r\n  hideGameElementsVisibility,\r\n  changePlayerTurn,\r\n  setGameFinished,\r\n  resetLastTwoMoves,\r\n  disableElementsActiveState,\r\n  updatePairs,\r\n} from '../store/gameSlice';\r\nimport { toggleModalGameEndVisibility } from '../store/modalsSlice';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { GAME_GRID_SIZES, GAME_THEMES, ICONS_ARR } from '../constants';\r\nconst GameGrid = () => {\r\n    const gridSize = useSelector((state) => state.game.gridSize);\r\n    const gridTheme = useSelector((state) => state.game.gridTheme);\r\n    const gameElements = useSelector((state) => state.game.gameElements);\r\n    const lastTwoMoves = useSelector((state) => state.game.lastTwoMoves);\r\n    const numOfPlayers = useSelector((state) => state.game.numOfPlayers);\r\n    const dispatch = useDispatch();\r\n  \r\n    const canPlay = lastTwoMoves.length !== 2;\r\n  \r\n    useEffect(() => {\r\n      let timeout;\r\n      if (!canPlay) {\r\n        timeout = setTimeout(() => {\r\n          if (lastTwoMoves[0].value !== lastTwoMoves[1].value) {\r\n            dispatch(\r\n              hideGameElementsVisibility([lastTwoMoves[0], lastTwoMoves[1]])\r\n            );\r\n            dispatch(\r\n                disableElementsActiveState([lastTwoMoves[0], lastTwoMoves[1]])\r\n              );\r\n              dispatch(resetLastTwoMoves());\r\n              if (numOfPlayers > 1) dispatch(changePlayerTurn());\r\n            } else {\r\n              dispatch(\r\n                disableElementsActiveState([lastTwoMoves[0], lastTwoMoves[1]])\r\n              );\r\n              dispatch(resetLastTwoMoves());\r\n              dispatch(updatePairs());\r\n            }\r\n    \r\n            if (\r\n              gameElements.length > 0 &&\r\n              gameElements.every((gameElement) => gameElement.isVisible)\r\n            ) {\r\n              dispatch(setGameFinished());\r\n              dispatch(toggleModalGameEndVisibility());\r\n            }\r\n          }, 1000);\r\n        }\r\n    \r\n        return () => {\r\n          if (!canPlay && timeout) {\r\n            clearTimeout(timeout);\r\n          }\r\n        };\r\n      }, [gameElements, lastTwoMoves, numOfPlayers, canPlay, dispatch]);\r\n\r\n      \r\n  const onMoveMadeHandler = useCallback(\r\n    (gameElement) => {\r\n      if (!canPlay) return;\r\n      dispatch(handleClickGameElement(gameElement));\r\n    },\r\n    [dispatch, canPlay]\r\n  );\r\n\r\n  const generateGridElements = useMemo(() => {\r\n    const gridElements = [];\r\n\r\n    gameElements.forEach((gameElement, index) => {\r\n      gridElements.push(\r\n        <GameButton\r\n          canPlay={canPlay}\r\n          isVisible={gameElement.isVisible}\r\n          isActive={gameElement.isActive}\r\n          onMoveMade={onMoveMadeHandler.bind(null, {\r\n            value: gameElement.value,\r\n            index,\r\n          })}\r\n          key={index}\r\n        >\r\n          {gridTheme === GAME_THEMES.NUMBERS ? (\r\n            gameElement.value\r\n          ) : (\r\n            <FontAwesomeIcon icon={ICONS_ARR[gameElement.value - 1]} />\r\n          )}\r\n        </GameButton>\r\n      );\r\n    });\r\n\r\n    return gridElements;\r\n  }, [gameElements, gridTheme, onMoveMadeHandler, canPlay]);\r\n\r\n  return (\r\n    <div\r\n      className={`${styles['game-grid']} ${\r\n        styles[\r\n          `game-grid--${gridSize === GAME_GRID_SIZES['4x4'] ? '4x4' : '6x6'}`\r\n        ]\r\n      }`}\r\n    >\r\n      {generateGridElements}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameGrid;\r\n\r\n    "]},"metadata":{},"sourceType":"module"}